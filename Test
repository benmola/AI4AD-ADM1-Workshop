{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# üß™ Interactive ADM1 Workshop: UK Feedstocks\n",
    "\n",
    "Welcome! This notebook allows you to explore the **ADM1 model** interactively with common UK AD feedstocks."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details>\n",
    "<summary>Step 1: Feedstock Database</summary>\n",
    "\n",
    "- Four UK AD feedstocks: maize silage, grass silage, food waste, cattle slurry\n",
    "- Characteristics: carbohydrates, proteins, lipids, VFAs, TAN, moisture, cations, anions\n",
    "- Database auto-saved as `Feedstock_Characteristics_Database.xlsx`\n",
    "</details>\n",
    "\n",
    "<details>\n",
    "<summary>Step 2: Feeding Plan</summary>\n",
    "\n",
    "- Set fractions of each feedstock (auto-normalised to sum = 1)\n",
    "- Set HRT, Reactor Volume (V), Flow (Q), Temperature (¬∞C)\n",
    "- Feeding plan saved as `Fixed_Feeding.xlsx`\n",
    "</details>\n",
    "\n",
    "<details>\n",
    "<summary>Step 3: Run ADM1 Simulator</summary>\n",
    "\n",
    "- Calculates Methane, Biogas, pH, FOS/TAC, Gas Pressure\n",
    "- Time-series plots generated\n",
    "- Summary printed at the end\n",
    "</details>\n",
    "\n",
    "<details>\n",
    "<summary>Step 4: Interactive Sliders</summary>\n",
    "\n",
    "- Adjust feed fractions and process parameters\n",
    "- Observe trends in outputs\n",
    "</details>\n",
    "\n",
    "<details>\n",
    "<summary>Step 5: Export Results</summary>\n",
    "\n",
    "- Download CSV of simulation results using `export_results()`\n",
    "</details>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "ename": "",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31mRunning cells with '.conda (Python 3.11.13)' requires the ipykernel package.\n",
      "\u001b[1;31mInstall 'ipykernel' into the Python environment. \n",
      "\u001b[1;31mCommand: 'conda install -n .conda ipykernel --update-deps --force-reinstall'"
     ]
    }
   ],
   "source": [
    "!pip install matplotlib ipywidgets pandas openpyxl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "2871c16b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from ipywidgets import interact, FloatSlider\n",
    "\n",
    "# Import ADM1 simulator from ADM1.py\n",
    "from ADM1 import ADM1Simulator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "117d81a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 1: Feedstock Database is now hardcoded in ADM1.py, no need to generate or save Excel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "7dace963",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 2: Feeding Plan - define feedstock ratios and process parameters\n",
    "def get_feedstock_ratios(maize_silage, grass_silage, food_waste, cattle_slurry):\n",
    "    ratios = {\n",
    "        \"Maize Silage\": maize_silage,\n",
    "        \"Grass Silage\": grass_silage,\n",
    "        \"Food Waste\": food_waste,\n",
    "        \"Cattle Slurry\": cattle_slurry\n",
    "    }\n",
    "    total = sum(ratios.values())\n",
    "    if total > 0:\n",
    "        ratios = {k: v/total for k, v in ratios.items()}\n",
    "    return ratios"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "880a1442",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 3: Run ADM1 Simulator\n",
    "def run_adm1(maize_silage, grass_silage, food_waste, cattle_slurry, HRT, V, Q, T):\n",
    "    ratios = get_feedstock_ratios(maize_silage, grass_silage, food_waste, cattle_slurry)\n",
    "    days = int(HRT)\n",
    "    simulator = ADM1Simulator(ratios, days=days, Q=Q, V=V, T=T)\n",
    "    simulator.run()\n",
    "    output_data = simulator.get_results()\n",
    "    if output_data.empty:\n",
    "        print(\"‚ö†Ô∏è Simulation returned no data.\")\n",
    "        return\n",
    "    # Patch: If 'V' is not present, add it for compatibility\n",
    "    if 'V' not in output_data.columns:\n",
    "        output_data.insert(len(output_data.columns), 'V', V)\n",
    "    summary = {\n",
    "        \"pH\": output_data[\"pH\"].iloc[-1],\n",
    "        \"FOS\": output_data[\"FOS\"].iloc[-1],\n",
    "        \"TAC\": output_data[\"TAC\"].iloc[-1],\n",
    "        \"FOS/TAC\": output_data[\"FOS/TAC\"].iloc[-1],\n",
    "        \"Methane Flow Rate\": output_data[\"q_ch4\"].iloc[-1],\n",
    "        \"Biogas\": output_data[\"q_gas\"].iloc[-1],\n",
    "        \"Gas Pressure\": output_data[\"p_gas\"].iloc[-1]\n",
    "    }\n",
    "    fig, ax = plt.subplots(3,1, figsize=(8,10), sharex=True)\n",
    "    ax[0].plot(output_data[\"time\"], output_data[\"q_ch4\"], label=\"Methane Flow\")\n",
    "    ax[0].set_ylabel(\"Methane (m¬≥/d)\")\n",
    "    ax[0].grid(True)\n",
    "    ax[1].plot(output_data[\"time\"], output_data[\"pH\"], color=\"green\", label=\"pH\")\n",
    "    ax[1].set_ylabel(\"pH\")\n",
    "    ax[1].grid(True)\n",
    "    ax[2].plot(output_data[\"time\"], output_data[\"FOS\"], color=\"red\", label=\"FOS\")\n",
    "    ax[2].plot(output_data[\"time\"], output_data[\"TAC\"], color=\"blue\", label=\"TAC\")\n",
    "    ax[2].set_ylabel(\"FOS / TAC\")\n",
    "    ax[2].legend()\n",
    "    ax[2].set_xlabel(\"Time (days)\")\n",
    "    ax[2].grid(True)\n",
    "    plt.suptitle(f\"Feed fractions ‚Üí maize:{maize_silage}, grass:{grass_silage}, food:{food_waste}, slurry:{cattle_slurry}\", fontsize=12)\n",
    "    plt.show()\n",
    "    print(\"üìä Simulation summary:\")\n",
    "    for k,v in summary.items():\n",
    "        print(f\"- {k}: {v:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b68f857c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 4: Interactive Sliders\n",
    "interact(\n",
    "    run_adm1,\n",
    "    maize_silage=FloatSlider(min=0, max=1, step=0.1, value=0.5, description=\"Maize Silage\"),\n",
    "    grass_silage=FloatSlider(min=0, max=1, step=0.1, value=0.3, description=\"Grass Silage\"),\n",
    "    food_waste=FloatSlider(min=0, max=1, step=0.1, value=0.1, description=\"Food Waste\"),\n",
    "    cattle_slurry=FloatSlider(min=0, max=1, step=0.1, value=0.1, description=\"Cattle Slurry\"),\n",
    "    HRT=FloatSlider(min=10, max=80, step=2, value=48, description=\"HRT (days)\"),\n",
    "    V=FloatSlider(min=1000, max=10000, step=500, value=6520, description=\"V (m¬≥)\"),\n",
    "    Q=FloatSlider(min=50, max=500, step=10, value=136.63, description=\"Q (m¬≥/d)\"),\n",
    "    T=FloatSlider(min=15, max=60, step=1, value=45, description=\"T (¬∞C)\"),\n",
    ");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "f4d687fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 5: Export Results\n",
    "def export_results(maize_silage=0.5, grass_silage=0.3, food_waste=0.1, cattle_slurry=0.1,\n",
    "                   HRT=48, V=6520, Q=136.63, T=45):\n",
    "    ratios = get_feedstock_ratios(maize_silage, grass_silage, food_waste, cattle_slurry)\n",
    "    days = int(HRT)\n",
    "    simulator = ADM1Simulator(ratios, days=days, Q=Q, V=V, T=T)\n",
    "    simulator.run()\n",
    "    output_data = simulator.get_results()\n",
    "    filename = \"ADM1_results.csv\"\n",
    "    output_data.to_csv(filename, index=False)\n",
    "    print(f\"‚úÖ CSV exported: {filename}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
